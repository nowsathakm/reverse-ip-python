name: Deploy Web-app

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-app:
    name: branch - ${{ github.ref_name }}
    runs-on: ubuntu-latest
    environment: development
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEV_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Retreive secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids: |
          CONFIG_ENV, web-app

    - name: Pull image
      run: |
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com
        echo "Pulling all images.."
        docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/web-app:dev || true

    - name: Build image
      run: |
        docker build . --file Dockerfile -t reverse-ip:latest
        docker tag reverse-ip:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/web-app:dev

    - name: Push image
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/web-app:dev


    - name: Update secrets
      run: |
        echo  $CONFIG_ENV >> config.json
        aws eks --region eu-north-1 update-kubeconfig --name ${{ vars.DEV_CLUSTER_NAME }}
        kubectl delete secret env-config -n dev
        kubectl create secret generic env-config --from-file=CONFIG_ENV=config.json --namespace=dev

    - name: Update EKS environtment
      run: |
        echo "Restarting all deployments.."
        kubectl rollout restart deployment web-app -n dev
        kubectl delete replicaset $(kubectl get replicaset -o jsonpath='{ .items[?(@.spec.replicas==0)].metadata.name }' -n dev) -n dev
